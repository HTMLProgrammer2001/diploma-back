# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AcademicDegreeListResponse implements PaginatedData {
  page: Int!
  responseList: [AcademicDegreeResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type AcademicDegreeResponse {
  id: Int!
  name: String!
}

type AcademicTitleListResponse implements PaginatedData {
  page: Int!
  responseList: [AcademicTitleResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type AcademicTitleResponse {
  id: Int!
  name: String!
}

type CommissionListResponse implements PaginatedData {
  page: Int!
  responseList: [CommissionResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type CommissionResponse {
  guid: String!
  id: Int!
  isDeleted: Boolean!
  name: String!
}

type DepartmentListResponse implements PaginatedData {
  page: Int!
  responseList: [DepartmentResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type DepartmentResponse {
  guid: String!
  id: Int!
  isDeleted: Boolean!
  name: String!
}

type IdNameResponse {
  id: Int!
  name: String!
}

type Mutation {
  createCommission(name: String): CommissionResponse!
  createDepartment(name: String!): DepartmentResponse!
  createTeacher(academicDegreeId: Int, academicTitleId: Int, address: String, avatar: Upload, birthday: String, commissionId: Int!, departmentId: Int!, email: String!, fullName: String!, phone: String, teacherRankId: Int, workStartDate: String): TeacherResponse!
  deleteCommission(guid: String!, id: Int!): Int!
  deleteDepartment(guid: String!, id: Int!): Int!
  updateCommission(guid: String!, id: Int!, name: String): CommissionResponse!
  updateDepartment(guid: String!, id: Int!, name: String): DepartmentResponse!
}

interface PaginatedData {
  page: Int!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type Query {
  getAcademicDegreeById(id: Int!): AcademicDegreeResponse!
  getAcademicDegreeList(isDesc: Boolean, name: String, orderField: String = "id", page: Int = 1, size: Int = 5): AcademicDegreeListResponse!
  getAcademicTitleById(id: Int!): AcademicTitleResponse!
  getAcademicTitleList(isDesc: Boolean, name: String, orderField: String = "id", page: Int = 1, size: Int = 5): AcademicTitleListResponse!
  getCommissionById(id: Int!, showDeleted: Boolean): CommissionResponse!
  getCommissionsList(isDesc: Boolean, name: String, orderField: String = "id", page: Int = 1, showDeleted: Boolean, size: Int = 5): CommissionListResponse!
  getDepartmentById(id: Int!, showDeleted: Boolean): DepartmentResponse!
  getDepartmentsList(isDesc: Boolean, name: String, orderField: String = "id", page: Int = 1, showDeleted: Boolean, size: Int = 5): DepartmentListResponse!
  getRoleById(id: Int!): RoleResponse!
  getRoleList(isDesc: Boolean, name: String, orderField: String = "id", page: Int = 1, size: Int = 5): RoleListResponse!
  getTeacherById(id: Int!, showDeleted: Boolean): TeacherResponse!
  getTeacherList(academicDegreeId: Int, academicTitleId: Int, commissionId: Int, departmentId: Int, email: String, fullName: String, isDesc: Boolean, orderField: String = "id", page: Int = 1, size: Int = 5, teachingRankId: Int): TeacherListResponse!
  getTeachingRankById(id: Int!): TeachingRankResponse!
  getTeachingRankList(isDesc: Boolean, name: String, orderField: String = "id", page: Int = 1, size: Int = 5): TeachingRankListResponse!
}

type RoleListResponse implements PaginatedData {
  page: Int!
  responseList: [RoleResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type RoleResponse {
  id: Int!
  name: String!
}

type TeacherListResponse implements PaginatedData {
  page: Int!
  responseList: [TeacherResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type TeacherResponse {
  academicDegree: IdNameResponse
  academicTitle: IdNameResponse
  address: String
  avatarUrl: String
  birthday: String
  commission: IdNameResponse!
  department: IdNameResponse!
  email: String!
  fullName: String!
  guid: String!
  id: Int!
  isDeleted: Boolean!
  phone: String
  teacherRank: IdNameResponse
  workStartDate: String
}

type TeachingRankListResponse implements PaginatedData {
  page: Int!
  responseList: [TeachingRankResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type TeachingRankResponse {
  id: Int!
  name: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
