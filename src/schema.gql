# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcademicDegreeCreateRequest {
  name: String
}

input AcademicDegreeGetByIdRequest {
  id: ID!
  showDeleted: Boolean = false
}

input AcademicDegreeGetListRequest {
  isDesc: Boolean
  name: String
  orderField: String = "id"
  showDeleted: Boolean
}

type AcademicDegreeListResponse implements PaginatedData {
  page: Int!
  responseList: [AcademicDegreeResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type AcademicDegreeResponse {
  guid: String!
  id: ID!
  isDeleted: Boolean!
  name: String!
}

input AcademicDegreeUpdateRequest {
  guid: String!
  id: ID!
  name: String
}

input AcademicTitleCreateRequest {
  name: String
}

input AcademicTitleGetByIdRequest {
  id: ID!
  showDeleted: Boolean = false
}

input AcademicTitleGetListRequest {
  isDesc: Boolean
  name: String
  orderField: String = "id"
  showDeleted: Boolean
}

type AcademicTitleListResponse implements PaginatedData {
  page: Int!
  responseList: [AcademicTitleResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type AcademicTitleResponse {
  guid: String!
  id: ID!
  isDeleted: Boolean!
  name: String!
}

input AcademicTitleUpdateRequest {
  guid: String!
  id: ID!
  name: String
}

input CommissionCreateRequest {
  name: String
}

input CommissionGetByIdRequest {
  id: ID!
  showDeleted: Boolean
}

input CommissionGetListRequest {
  isDesc: Boolean
  name: String
  orderField: String = "id"
  showDeleted: Boolean
}

type CommissionListResponse implements PaginatedData {
  page: Int!
  responseList: [CommissionResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type CommissionResponse {
  guid: String!
  id: ID!
  isDeleted: Boolean!
  name: String!
}

input CommissionUpdateRequest {
  guid: String!
  id: ID!
  name: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DepartmentCreateRequest {
  name: String!
}

input DepartmentGetByIdRequest {
  id: ID!
  showDeleted: Boolean
}

input DepartmentGetListRequest {
  isDesc: Boolean
  name: String
  orderField: String = "id"
  showDeleted: Boolean
}

type DepartmentListResponse implements PaginatedData {
  page: Int!
  responseList: [DepartmentResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type DepartmentResponse {
  guid: String!
  id: ID!
  isDeleted: Boolean!
  name: String!
}

input DepartmentUpdateRequest {
  guid: String!
  id: ID!
  name: String
}

input HonorCreateRequest {
  date: String
  description: String
  isActive: Boolean = true
  orderNumber: String
  title: String!
  userId: ID!
}

input HonorGetByIdRequest {
  id: ID!
  showDeleted: Boolean
}

input HonorGetListRequest {
  dateLess: String
  dateMore: String
  isDesc: Boolean
  orderField: String = "id"
  orderNumber: String
  showDeleted: Boolean
  showInActive: Boolean
  title: String
  userId: ID
}

type HonorListResponse implements PaginatedData {
  page: Int!
  responseList: [HonorResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type HonorResponse {
  date: String!
  description: String
  guid: String!
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  orderNumber: String
  title: String!
  user: IdNameResponse!
}

input HonorUpdateRequest {
  date: String
  description: String
  guid: String!
  id: ID!
  isActive: Boolean
  orderNumber: String
  title: String
  userId: ID
}

type IdNameResponse {
  id: ID!
  name: String!
}

type IdResponse {
  id: ID!
}

input LoginRequest {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

type Mutation {
  createAcademicDegree(body: AcademicDegreeCreateRequest!): AcademicDegreeResponse!
  createAcademicTitle(body: AcademicTitleCreateRequest!): AcademicTitleResponse!
  createCommission(body: CommissionCreateRequest!): CommissionResponse!
  createDepartment(body: DepartmentCreateRequest!): DepartmentResponse!
  createHonor(body: HonorCreateRequest!): HonorResponse!
  createTeacher(body: TeacherCreateRequest!): TeacherResponse!
  createTeachingRank(body: TeachingRankCreateRequest!): TeachingRankResponse!
  createUser(body: UserCreateRequest!): UserResponse!
  deleteAcademicDegree(guid: String!, id: Int!): IdResponse!
  deleteAcademicTitle(guid: String!, id: Int!): IdResponse!
  deleteCommission(guid: String!, id: Int!): IdResponse!
  deleteDepartment(guid: String!, id: Int!): IdResponse!
  deleteHonor(guid: String!, id: Int!): IdResponse!
  deleteTeacher(guid: String!, id: Int!): IdResponse!
  deleteTeachingRank(guid: String!, id: Int!): IdResponse!
  deleteUser(guid: String!, id: Int!): IdResponse!
  login(body: LoginRequest!): LoginResponse!
  logout(refreshToken: String!): ResultResponse!
  refreshToken(refreshToken: String!): RefreshTokenResponse!
  updateAcademicDegree(body: AcademicDegreeUpdateRequest!): AcademicDegreeResponse!
  updateAcademicTitle(body: AcademicTitleUpdateRequest!): AcademicTitleResponse!
  updateCommission(body: CommissionUpdateRequest!): CommissionResponse!
  updateDepartment(body: DepartmentUpdateRequest!): DepartmentResponse!
  updateHonor(body: HonorUpdateRequest!): HonorResponse!
  updateRole(body: RoleUpdateRequest!): RoleResponse!
  updateTeacher(body: TeacherUpdateRequest!): TeacherResponse!
  updateTeachingRank(body: TeachingRankUpdateRequest!): TeachingRankResponse!
  updateUser(body: UserUpdateRequest!): UserResponse!
}

interface PaginatedData {
  page: Int!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type Query {
  getAcademicDegreeById(query: AcademicDegreeGetByIdRequest!): AcademicDegreeResponse!
  getAcademicDegreeList(query: AcademicDegreeGetListRequest!): AcademicDegreeListResponse!
  getAcademicTitleById(query: AcademicTitleGetByIdRequest!): AcademicTitleResponse!
  getAcademicTitleList(query: AcademicTitleGetListRequest!): AcademicTitleListResponse!
  getCommissionById(query: CommissionGetByIdRequest!): CommissionResponse!
  getCommissionsList(query: CommissionGetListRequest!): CommissionListResponse!
  getDepartmentById(query: DepartmentGetByIdRequest!): DepartmentResponse!
  getDepartmentsList(query: DepartmentGetListRequest!): DepartmentListResponse!
  getHonorById(query: HonorGetByIdRequest!): HonorResponse!
  getHonorList(query: HonorGetListRequest!): HonorListResponse!
  getRoleById(query: RoleGetByIdRequest!): RoleResponse!
  getRoleList(query: RoleGetListRequest!): RoleListResponse!
  getTeacherById(query: TeacherGetByIdRequest!): TeacherResponse!
  getTeacherList(query: TeacherGetListRequest!): TeacherListResponse!
  getTeachingRankById(query: TeachingRankGetByIdRequest!): TeachingRankResponse!
  getTeachingRankList(query: TeachingRankGetListRequest!): TeachingRankListResponse!
  getUserById(query: UserGetByIdRequest!): UserResponse!
  getUserList(query: UserGetListRequest!): UserListResponse!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
}

type ResultResponse {
  result: Boolean!
}

input RoleGetByIdRequest {
  id: ID!
}

input RoleGetListRequest {
  isDesc: Boolean
  name: String
  orderField: String = "id"
}

type RoleListResponse implements PaginatedData {
  page: Int!
  responseList: [RoleResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type RoleResponse {
  guid: String!
  id: ID!
  name: String!
}

input RoleUpdateRequest {
  guid: String!
  id: ID!
  name: String
}

input TeacherCreateRequest {
  academicDegreeId: ID
  academicTitleId: ID
  address: String
  avatar: Upload
  birthday: String
  commissionId: ID!
  departmentId: ID!
  email: String!
  fullName: String!
  phone: String
  teacherRankId: ID
  workStartDate: DateTime
}

input TeacherGetByIdRequest {
  id: ID!
  showDeleted: Boolean
}

input TeacherGetListRequest {
  academicDegreeId: ID
  academicTitleId: ID
  commissionId: ID
  departmentId: ID
  email: String
  fullName: String
  isDesc: Boolean
  orderField: String = "id"
  showDeleted: Boolean
  teachingRankId: ID
}

type TeacherListResponse implements PaginatedData {
  page: Int!
  responseList: [TeacherResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type TeacherResponse {
  academicDegree: IdNameResponse
  academicTitle: IdNameResponse
  address: String
  avatarUrl: String
  birthday: String
  commission: IdNameResponse!
  department: IdNameResponse!
  email: String!
  fullName: String!
  guid: String!
  id: ID!
  isDeleted: Boolean!
  phone: String
  teacherRank: IdNameResponse
  workStartDate: String
}

input TeacherUpdateRequest {
  academicDegreeId: ID
  academicTitleId: ID
  address: String
  avatar: Upload
  birthday: DateTime
  commissionId: ID
  departmentId: ID
  email: String
  fullName: String
  guid: String!
  id: ID!
  phone: String
  teacherRankId: ID
  workStartDate: DateTime
}

input TeachingRankCreateRequest {
  name: String!
}

input TeachingRankGetByIdRequest {
  id: ID!
  showDeleted: Boolean
}

input TeachingRankGetListRequest {
  isDesc: Boolean
  name: String
  orderField: String = "id"
  showDeleted: Boolean
}

type TeachingRankListResponse implements PaginatedData {
  page: Int!
  responseList: [TeachingRankResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type TeachingRankResponse {
  guid: String!
  id: ID!
  isDeleted: Boolean!
  name: String!
}

input TeachingRankUpdateRequest {
  guid: String!
  id: ID!
  name: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserCreateRequest {
  avatar: Upload
  email: String!
  fullName: String!
  password: String!
  phone: String
  roleId: ID!
}

input UserGetByIdRequest {
  id: ID!
  showDeleted: Boolean
}

input UserGetListRequest {
  email: String
  fullName: String
  isDesc: Boolean
  orderField: String = "id"
  roleId: ID
  showDeleted: Boolean
}

type UserListResponse implements PaginatedData {
  page: Int!
  responseList: [UserResponse!]!
  size: Int!
  skip: Int!
  totalElements: Int!
  totalPages: Int!
}

type UserResponse {
  avatarUrl: String
  email: String!
  fullName: String!
  guid: String!
  id: ID!
  isDeleted: Boolean!
  phone: String
  role: IdNameResponse
}

input UserUpdateRequest {
  avatar: Upload
  email: String
  fullName: String
  guid: String!
  id: ID!
  password: String
  phone: String
  roleId: ID
}
